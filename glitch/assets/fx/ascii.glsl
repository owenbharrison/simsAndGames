//SPACE thru DEL
const uint font[192]=uint[](
	0x00000000u, 0x00000000u,
	0x3c3c3c18u, 0x18001818u,
	0x00363636u, 0x00000000u,
	0x367f3636u, 0x0036367fu,
	0x1e033e0cu, 0x000c1f30u,
	0x18336300u, 0x0063660cu,
	0x6e1c361cu, 0x006e333bu,
	0x00030606u, 0x00000000u,
	0x06060c18u, 0x00180c06u,
	0x18180c06u, 0x00060c18u,
	0xff3c6600u, 0x0000663cu,
	0x3f0c0c00u, 0x00000c0cu,
	0x00000000u, 0x060c0c00u,
	0x3f000000u, 0x00000000u,
	0x00000000u, 0x000c0c00u,
	0x0c183060u, 0x00010306u,
	0x6363321cu, 0x001c2663u,
	0x18181c18u, 0x007e1818u,
	0x3c70633eu, 0x007f071eu,
	0x3c18307eu, 0x003e6360u,
	0x33363c38u, 0x0030307fu,
	0x603f033fu, 0x003e6360u,
	0x3f03063cu, 0x003e6363u,
	0x1830637fu, 0x000c0c0cu,
	0x3e63633eu, 0x003e6363u,
	0x7e63633eu, 0x001e3060u,
	0x000c0c00u, 0x000c0c00u,
	0x000c0c00u, 0x060c0c00u,
	0x03060c18u, 0x00180c06u,
	0x003f0000u, 0x00003f00u,
	0x30180c06u, 0x00060c18u,
	0x1830331eu, 0x000c000cu,
	0x7b7b633eu, 0x001e037bu,
	0x6363361cu, 0x0063637fu,
	0x3f63633fu, 0x003f6363u,
	0x0303663cu, 0x003c6603u,
	0x6363331fu, 0x001f3363u,
	0x3f03037fu, 0x007f0303u,
	0x3f03037fu, 0x00030303u,
	0x7303067cu, 0x007c6663u,
	0x7f636363u, 0x00636363u,
	0x1818187eu, 0x007e1818u,
	0x60606078u, 0x003e6363u,
	0x0f1b3363u, 0x00733b1fu,
	0x06060606u, 0x007e0606u,
	0x7f7f7763u, 0x0063636bu,
	0x7f6f6763u, 0x0063737bu,
	0x6363633eu, 0x003e6363u,
	0x6363633fu, 0x0003033fu,
	0x6363633eu, 0x005e337bu,
	0x7363633fu, 0x00733b1fu,
	0x3e03331eu, 0x003e6360u,
	0x1818187eu, 0x00181818u,
	0x63636363u, 0x003e6363u,
	0x77636363u, 0x00081c3eu,
	0x7f6b6363u, 0x0063777fu,
	0x1c3e7763u, 0x0063773eu,
	0x3c666666u, 0x00181818u,
	0x1c38707fu, 0x007f070eu,
	0x0606061eu, 0x001e0606u,
	0x180c0603u, 0x00406030u,
	0x1818181eu, 0x001e1818u,
	0x63361c08u, 0x00000000u,
	0x00000000u, 0xff000000u,
	0x00180c0cu, 0x00000000u,
	0x663c0000u, 0x00dc6666u,
	0x663e0606u, 0x003e6666u,
	0x067c0000u, 0x007c0606u,
	0x667c6060u, 0x007c6666u,
	0x663c0000u, 0x007c067eu,
	0x7e181870u, 0x00181818u,
	0x667c0000u, 0x3c607c66u,
	0x3e060606u, 0x00666666u,
	0x18001800u, 0x00181818u,
	0x60006000u, 0x3c666060u,
	0x26460606u, 0x00663e16u,
	0x18181818u, 0x00181818u,
	0xd66e0000u, 0x00d6d6d6u,
	0x663e0000u, 0x00666666u,
	0x663c0000u, 0x003c6666u,
	0x663e0000u, 0x06063e66u,
	0x667c0000u, 0x60607c66u,
	0x0e760000u, 0x00060606u,
	0x023c0000u, 0x003e603cu,
	0x0c3f0c0cu, 0x00380c0cu,
	0x66660000u, 0x003c6666u,
	0x66660000u, 0x00182466u,
	0xd6c60000u, 0x006cd6d6u,
	0x6cc60000u, 0x00c66c38u,
	0x66660000u, 0x060c1834u,
	0x307e0000u, 0x007e0c18u,
	0x070c0c38u, 0x00380c0cu,
	0x00181818u, 0x00181818u,
	0x380c0c07u, 0x00070c0cu,
	0x00003b6eu, 0x00000000u,
	0x361c0800u, 0x007f6363u
);

//should be a multiple of 8
const float Size=8;

// .:-=+*#%@
const int palette_size=10;
const int palatte[10]=int[](32, 46, 58, 45, 43, 61, 42, 35, 37, 64);

void main() {
	//pixel space coordinates
	vec2 resolution=textureSize(tex1, 0);
	vec2 coord=resolution*xUV1;

	//truncate position
	vec2 div=coord/Size;
	
	//sample image at same pixel across character
	vec2 trunc_uv=floor(div)*Size/resolution;
	vec4 col=texture(tex1, trunc_uv);
	float lum=dot(col.rgb, vec3(.299, .587, .114));
	
	//determine char to use.
	int pal_ix=int(float(palette_size)*lum);
	int letter=palatte[pal_ix];
	
	//repeating uvs
	vec2 xy=fract(div);
	int x=int(8*xy.x);
	int y=7-int(8*xy.y);
	
	//get uints
	int where=2*(letter-32);
	uint urow;
	if(y<4) urow=font[where]>>(8*y);
	else urow=font[1+where]>>(8*(y-4));
	int row=int(0xffu&urow);
	
	//get single font pixel
	int bit=1&(row>>x);
	
	//saturated color?
	if(bit!=0) pix_out=vec4(col.rgb/lum, 1);
	else pix_out=vec4(vec3(0), 1);
}